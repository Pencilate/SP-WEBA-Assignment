@*
    CREATE ACCOUNT RATE *@



<nav aria-label="breadcrumb">
    <ol class="breadcrumb ">
        <li class="breadcrumb-item font-small"><a asp-controller="Instructor" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item font-small"><a href="##" onClick="history.go(-1); return false;">Manage Timesheet</a></li>
        <li class="breadcrumb-item font-small active">Update Timesheet Schedule</li>
    </ol>
</nav>
<div class="card" style="margin-bottom:200px">
    <div class="card-header stylish-color-dark white-text">
        <div class="container-fluid">
            <div class="row vertical-align">
                <h4 class="one" style="padding-top:1.8%;">Update Timesheet Schedule <span id="titleBox"></span></h4>
            </div>
        </div>
    </div>
    <div class="card-body" style="padding:3% 6%">
        <p class="font-small float-right">* indicates required fields</p>
        @*Form start *@
        <form id="dataForm" novalidate autoComplete="off">
            <div class="form-group col-md-12">
                @*Week Day*@
                <label for="dateOfLessonBox" class="font-small font-weight-medium" style="padding-top:3%;">Date of lesson</label><br />
                <span class="text-left" id="dateOfLessonBox"></span>
            </div>
            <div class="form-group col-md-12">
                @*Week Day*@
                <label for="dayInput" class="font-small font-weight-medium" style="padding-top:3%;">Day of week</label><br />
                <span class="text-left" id="dayBox"></span>
            </div>
            <hr />
            <div class="form-group col-md-12">
                @*Lesson type names*@
                <label for="lessonTypeNamesInput" class="font-small font-weight-medium" style="padding-top:3%;">Lesson types *</label><br />
                <select id="lessonTypeNamesInput" name="lessonTypeNamesInput" class="col-md-6" multiple></select>
            </div>
            <hr />
            <div class="form-group col-md-12">
                @*Chargeable amount*@
                <label for="serviceAmountChargeableBox" class="font-small font-weight-medium">Service amount chargeable</label><br />
                <span class="text-left" id="serviceAmountChargeableBox"></span>
            </div>
            <div class="form-group col-md-12">
                @*Official Start Time*@
                <label for="officialStartTimeBox" class="font-small font-weight-medium">Official Start Time</label><br />
                <span class="text-left" id="officialStartTimeBox"></span>
            </div>
            <div class="form-group col-md-12">
                @*Actual Start Time*@
                <label for="actualStartTimeInput" class="font-small font-weight-medium">Actual Start Time *</label><br />
                <input type="text" name="actualStartTimeInput" id="actualStartTimeInput" class="timepicker custom-select form-control" style="font-size:initial" required />
            </div>
            <div class="form-group col-md-12">
                @*Official Start Time*@
                <label for="officialEndTimeBox" class="font-small font-weight-medium">Official End Time</label><br />
                <span class="text-left" id="officialEndTimeBox"></span>
            </div>
            <div class="form-group col-md-12">
                @*Actual End Time*@
                <label for="actualEndTimeInput" class="font-small font-weight-medium">Actual End Time *</label><br />
                <input type="text" name="actualEndTimeInput" id="actualEndTimeInput" class="timepicker custom-select form-control" style="font-size:initial" required />
            </div>
            <hr />
            <div class="form-group col-md-12">
                <canvas width="500" height="400" id="signature"
                        style="border:1px solid black"></canvas>
            </div>
            <hr />
            <div class="form-group col-md-12">
                @*Toggle Visibility*@
                <label class="control-label font-weight-medium font-medium sans-serif"
                       for="isReplacementInstructorToggleBtn" style="font-size:smaller;">Is replacement instructor *</label>

                <label class="bs-switch align-middle ml-3 ">
                    <input type="checkbox" id="isReplacementInstructorToggleBtn" checked>
                    <span class="slider round"></span>
                </label>
            </div>
            <br />
            <div class="form-group col-md-12">
                <label class="control-label col-md-1"></label>
                @*Submit and cancel buttons*@
                <div class="float-right">
                    <button type="button" id="saveButton" class="btn btn-primary">
                        Submit
                    </button>
                    <button type="button" class="btn btn-light" href="##" onClick="history.go(-1); return false;">Back</button>
                </div>
            </div>
        </form>
    </div><!-- end of div element which has the class="card-body" -->
</div><!-- end of the div element which has the class="card" -->
@section scripts{
    <link href="~/lib/datepicker/datepicker.min.css" rel="stylesheet" />
    <link href="~/lib/wickedpicker/wickedpicker.min.css" rel="stylesheet" />

    <link href="~/css/site.min.css" rel="stylesheet" />
    <link rel="stylesheet" type="text/css" href="~/css/site.css">
    <link href="~/lib/datatables/datatables.min.css" rel="stylesheet" />
    <link href="~/lib/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet" />

    <script src="~/lib/datatables/datatables.min.js"></script>
    <script src="~/lib/wickedpicker/wickedpicker.js"></script>
    <script src="~/lib/moment/moment.min.js"></script>

    <script src="~/lib/datepicker/datepicker.min.js"></script>
    <script src="~/lib/moment/datetime-moment.js"></script>
    <script src="~/lib/bootstrap-select/js/bootstrap-select.min.js"></script>
    <script src="~/lib/signature-pad/signature_pad.min.js"></script>
    <style>
        /*Set colours of error and valid messages on validation*/
        .error {
            color: red;
            font-size: small
        }
        .hidden{
           display:none;
        }
        .valid {
            color: green;
            font-size: small
        }

        body {
            margin-top: 30px;
        }

        .view{
            color:blue;
            font-weight:bold;
        }
        .positive-view {
            color: green;
            font-weight: bold;
        }
        .negative-view {
            color: red;
            font-weight: bold;
        }
    </style>
    <script>

        (function (window, $, moment) {

            $.when(loadLessonTypeNames()).then(loadTimeSheetSchedule);



            //Get timeSheetScheduleId from address bar
            let timeSheetScheduleId = getIdFromAddressBar();
            let isReplacementInstructor = false;

            function getIdFromAddressBar() {
                let urlArray = window.location.href.split('/');
                let id = urlArray[urlArray.length - 1];
                return id;
            };
            //Initialise signature pad
            let canvas = document.querySelector('#signature');
            let pad = new SignaturePad(canvas);

            //Initialise the toggle button for indicating is replacement instructor
            $("#isReplacementInstructorToggleBtn").on('change', function () {
                if ($(this).is(':checked')) {
                    //switchStatus = $(this).is(':checked');
                    isReplacementInstructor = $(this).is(':checked');
                    // alert(visibility);// To verify
                }
                else {
                    isReplacementInstructor = $(this).is(':checked');
                }
            });
            //Initialise start timepicker
            let $actualStartTimeInputElement = $('#actualStartTimeInput').wickedpicker({

                minutesInterval: 15, //Change interval for minutes to 15
            }).on('change', function () {
                $('.timepicker').valid();  // triggers a validation test
            });

            //Initialise end timepicker
            let $actualEndTimeInputElement = $('#actualEndTimeInput').wickedpicker({

                minutesInterval: 15, //Change interval for minutes to 15
            }).on('change', function () {
                $('.timepicker').valid();  // triggers a validation test for both timepickers
            });

            $('#actualStartTimeInput,#actualEndTimeInput').on('change', function () {
                let collectedActualStartTimeInMinutes = convertTimeToMinutes($('#actualStartTimeInput').val());
                let collectedActualEndTimeInMinutes = convertTimeToMinutes($('#actualEndTimeInput').val());
                let durationInMinutes = collectedActualEndTimeInMinutes - collectedActualStartTimeInMinutes;
                let chargeableAmount = (durationInMinutes / 60) * ratePerHour;
                $('#serviceAmountChargeableBox').text('$' + chargeableAmount);
            })

            let ratePerHour = 0;
            function loadTimeSheetSchedule() {
                //Load the timesheet schedule record details from backend.
                $loadTimeSheetScheduleHandler = jQuery.ajax({
                    type: 'GET',
                    url: '/API/TimeSheets/GetOneTimeSheetSchedule/' + timeSheetScheduleId,
                }).done(function (data, textStatus, jqXHR) {
                    console.log(data);
                    let schedule = data;
                    let accountName = schedule.customerAccountName;
                    //Using the minutesTo12HourHHMM to Format the incoming data from total minutes 
                    //from midnight to HH: MM AM / PM so that it can be readable to the user.
                    let officialStartTimeHHMM = minutesTo12HourHHMM(schedule.officialStartTimeInMinutes).toUpperCase();
                    let officialEndTimeHHMM = minutesTo12HourHHMM(schedule.officialEndTimeInMinutes).toUpperCase();


                    let officialStartTimeInMinutes = schedule.officialStartTimeInMinutes;
                    let officialEndTimeInMinutes = schedule.officialEndTimeInMinutes;

                    let actualStartTimeInMinutes = schedule.actualStartTimeInMinutes;
                    let actualEndTimeInMinutes = schedule.actualEndTimeInMinutes;
                    let isSystemCreated = schedule.isSystemCreated;
                    let isReplacementInstructor = schedule.isReplacementInstructor;
                    let startTimeInMinutes = 0;
                    let endTimeInMinutes = 0;
                    let lessonTypeNames = schedule.lessonTypeNames;
                    ratePerHour = schedule.ratePerHour;
                    if (schedule.actualStartTimeInMinutes === null) {
                        actualStartTimeHHMM = schedule.officialStartTimeHHMM
                        startTimeInMinutes = schedule.officialStartTimeInMinutes
                    } else {
                        actualStartTimeHHMM = convertMinsToHrsMins(actualStartTimeInMinutes);
                        startTimeInMinutes = actualStartTimeInMinutes;
                    }
                    if (schedule.actualEndTimeInMinutes === null) {
                        actualEndTimeHHMM = schedule.officialEndTimeHHMM;
                        endTimeInMinutes = schedule.officialEndTimeInMinutes;
                    } else {
                        actualEndTimeHHMM = convertMinsToHrsMins(actualEndTimeInMinutes)
                        endTimeInMinutes = actualEndTimeInMinutes;
                    }
                    let weekDayName = dateToWeekDayName(schedule.dateOfLesson);


                    document.getElementById('titleBox').innerHTML = "Update timesheet '" + schedule.title + "'";
                    $('#dateOfLessonBox').html(moment(new Date(schedule.dateOfLesson)).format('DD/MM/YYYY'));
                    $('#officialStartTimeBox').html(officialStartTimeHHMM);
                    $('#officialEndTimeBox').html(officialEndTimeHHMM);
                    let durationInMinutes = endTimeInMinutes - startTimeInMinutes;
                    let chargeableAmount = (durationInMinutes / 60) * ratePerHour;
                    $('#serviceAmountChargeableBox').text('$' + chargeableAmount);
                    console.dir(schedule.dateOfLesson)
                    console.log(weekDayName);
                    $('#dayBox').html(weekDayName);

console.log(`${actualStartTimeHHMM} and ${actualEndTimeHHMM}`)                    
                    $actualStartTimeInputElement.wickedpicker(
                        'setTime', 0, actualStartTimeHHMM);
                    $actualEndTimeInputElement.wickedpicker(
                        'setTime', 0, actualEndTimeHHMM);

                    if (schedule.status === "COMPLETED") {
                        let actualStartTime12HrHHMM = minutesTo12HourHHMM(schedule.actualStartTimeInMinutes).toUpperCase();
                        let actualEndTime12HrHHMM = minutesTo12HourHHMM(schedule.actualEndTimeInMinutes).toUpperCase();
                        if (actualStartTimeInMinutes < officialStartTimeInMinutes) {
                            $("<span />", { text: actualStartTime12HrHHMM, "class": "positve-view" }).insertAfter($actualStartTimeInputElement);
                            $actualStartTimeInputElement.hide();
                        } else if (actualStartTimeInMinutes > officialStartTimeInMinutes) {
                            $("<span />", { text: actualStartTime12HrHHMM, "class": "negative-view" }).insertAfter($actualStartTimeInputElement);
                            $actualStartTimeInputElement.hide();
                        } else {
                            $("<span />", { text: actualStartTime12HrHHMM, "class": "view" }).insertAfter($actualStartTimeInputElement);
                            $actualStartTimeInputElement.hide();
                        }

                        if (actualEndTimeInMinutes > officialEndTimeInMinutes) {
                            $("<span />", { text: actualEndTime12HrHHMM, "class": "positive-view" }).insertAfter($actualEndTimeInputElement);
                            $actualEndTimeInputElement.hide();
                        } else if (actualEndTimeInMinutes < officialEndTimeInMinutes) {
                            $("<span />", { text: actualEndTime12HrHHMM, "class": "negative-view" }).insertAfter($actualEndTimeInputElement);
                            $actualEndTimeInputElement.hide();
                        } else {
                            $("<span />", { text: actualEndTime12HrHHMM, "class": "view" }).insertAfter($actualEndTimeInputElement);
                            $actualEndTimeInputElement.hide();
                        }

                        let $lessonTypeNamesInputElement = $('#lessonTypeNamesInput');
                        $('<span />', { text: lessonTypeNames, "class": "view" }).insertAfter($lessonTypeNamesInputElement);
                        $lessonTypeNamesInputElement.attr('disabled', true);
                        //Display the signature
                        pad.fromDataURL('data:image / png; base64,' + schedule.signature);
                        //Disable any signature editing events
                        pad.off();
                        $('#saveButton').addClass('disabled');
                        $('#saveButton').text('Schedule record has been updated');
                }//if (schedule.status==='COMPLETED')
                    document.getElementById('isReplacementInstructorToggleBtn').checked = isReplacementInstructor;
                    if (isSystemCreated === true) {
                        document.getElementById('isReplacementInstructorToggleBtn').disabled = true;
                    }
                });

            }//loadTimeSheetSchedule


            //Override jquery validate plugin defaults to show validation status of input boxes
            $.validator.setDefaults({
                highlight: function (element) {
                    $(element).closest('.form-group').removeClass('valid').addClass('error')
                    $(element).css('border', '2px solid red');
                },
                unhighlight: function (element) {
                    $(element).closest('.form-group').removeClass('error').addClass('valid');
                    $(element).css('border', '2px solid #2ab934'); //green border

                },
                errorElement: 'span',
                errorPlacement: function (error, element) {
                    if (element.parent('.input-group').length) {
                        error.insertAfter(element.parent());
                    } else {
                        error.insertAfter(element);
                    }
                }
            });




            //Set jquery validation rules
            $('#dataForm').validate({
                rules: {



                },
                messages: {


                }
            });

            function dateToWeekDayName(inDate) {
                let weekDayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                let date = new Date(inDate);
                return weekDayNames[date.getDay()];
            };

            function loadLessonTypeNames() {
                //https://stackoverflow.com/questions/21974649/jquery-when-then-also-when-done-not-waiting
                //Load the lesson type names from the backend.
                return jQuery.ajax({
                    type: 'GET',
                    url: '/API/LessonTypes/',
                }).done(function (data) {
                    console.dir('loadLessonTypeNames completed execution. The anonymous function inside done() is executed');
                    console.dir(data);
                    let $lessonTypeNamesInputElement = $('#lessonTypeNamesInput');
                    for (let index = 0; index < data.length; index++) {
                        if (data[index].isVisible === true) {
                            let $optionElement = $(`<option value="${data[index].lessonTypeName}">${data[index].lessonTypeName}</option>`);
                            console.dir($optionElement);
                            $lessonTypeNamesInputElement.append($optionElement);
                        }
                    }
                    $lessonTypeNamesInputElement.selectpicker();//Had to refer to the https://github.com/snapappointments/bootstrap-select to check how to initialize using JS
                })//end of jQuery.ajax(,,,).done(...)
            }


            //Create method to store webform data
            //Create method to store webform data
            function WebFormData(inTimeSheetScheduleId, inLessonTypeNames, inActualStartTimeInMinutes, inActualEndTimeInMinutes, inSignatureData) {

                this.timeSheetScheduleId = inTimeSheetScheduleId;

                this.lessonTypeNames = inLessonTypeNames;
                this.actualEndTimeInMinutes = inActualEndTimeInMinutes;
                this.actualStartTimeInMinutes = inActualStartTimeInMinutes
                this.signatureData = inSignatureData;
            }
            //Reference: https://dzone.com/articles/creating-a-signature-pad-using-canvas-and-aspnet-c
            //For developing signature pad a


            //Create method to submit form with POST API method
            $('#saveButton').on('click', function () {
                $('#dataForm').validate();
                if ($("#dataForm").valid()) {

                    let collectedLessonTypeNameList = $('#lessonTypeNamesInput').val();//Returns an array of strings
                    //If only one is selected, it is a string without comma seperator
                    //if non is selected, it is an empty string
                    //https://stackoverflow.com/questions/44324398/how-to-use-jquery-validate-plugin-for-bootstrap-select
                    //Refer to the discussion above to check out how to apply jQuery validator on the bootstrap-select widget
                    //You need to make changes to the library so that the validator does not ignore the hidden <select> element.
                    let collectedLessonTypeNames = collectedLessonTypeNameList.join(',');
                    let collectedActualStartTimeInMinutes = convertTimeToMinutes($('#actualStartTimeInput').val());
                    let collectedActualEndTimeInMinutes = convertTimeToMinutes($('#actualEndTimeInput').val());
                   
                    var collectedImage = pad.toDataURL("image/png");
                    collectedImage = collectedImage.replace('data:image/png;base64,', '');
                    pad.off();
                    var webFormData = new WebFormData(timeSheetScheduleId, collectedLessonTypeNames,
                        collectedActualStartTimeInMinutes, collectedActualEndTimeInMinutes, collectedImage);
                    console.dir(webFormData);

                   jQuery.ajax({
                                            type: 'PUT',
                       url: '/API/TimeSheets/UpdateTimeSheetSchedule/' ,
                                            contentType: 'application/x-www-form-urlencoded',
                                            dataType: 'json',
                                            data: webFormData
                                        }).done(function (data, textStatus, jqXHR) {
                                            new Noty({
                                                text: data.message,
                                                theme: 'metroui',
                                                layout: 'bottomRight',
                                                timeout: 1200,
                                                type: 'success'
                                            }).show();
                                            window.setTimeout(function () {
                                                window.location.reload();
                                            }, 2500);
                                      }).fail(function (data, textStatus, jqXHR) {
                                            console.log(textStatus);
                                            console.log(data);
                                            new Noty({
                                                text: data.responseJSON.message,
                                                theme: 'metroui',
                                                layout: 'bottomRight',
                                                timeout: 5000,
                                                type: 'error'
                                            }).show();
                                        });//end of jQuery.ajax().done().fail();
                                        
                }//end of if ($("#dataForm").valid()) {

            });//end of $('#saveButton').on('click', function () {

            //GENERAL FUNCTIONS----------------------------------------------------------------------------

            //Function to convert Time string to number of minutes from 12am
            function convertTimeToMinutes(time12h) {
                let [hours, colon, minutes, modifier] = time12h.split(' ');

                minutes = parseInt(minutes, 10);
                if (hours === '12') {
                    hours = '00';
                }
                if (modifier === 'PM') {
                    hours = parseInt(hours, 10) + 12;
                }

                return hours * 60 + minutes;
            }
            //Function to convert Minutes to Hours:Minutes
            function convertMinsToHrsMins(mins) {
                let h = Math.floor(mins / 60);
                let m = mins % 60;
                h = h < 10 ? '0' + h : h;
                m = m < 10 ? '0' + m : m;
                return `${h}:${m}`;
            }
            //Function to convert Minutes to Hours:Minutes AM/PM
            function minutesTo12HourHHMM(mins, twentyFour = false) {
                let h = Math.floor(mins / 60);
                let m = mins % 60;
                m = m < 10 ? '0' + m : m;

                if (twentyFour) {
                    h = h < 10 ? '0' + h : h;
                    return `${h}:${m}`;
                } else {
                    let a = 'am';
                    if (h >= 12) a = 'pm';
                    if (h > 12) h = h - 12;
                    return `${h}:${m} ${a}`;
                }
            }
        })(window, jQuery, moment);
    </script>
}
